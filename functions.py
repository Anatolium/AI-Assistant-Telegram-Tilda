import os
import requests
from dotenv import load_dotenv
from google.oauth2 import service_account
from googleapiclient.discovery import build
from datetime import datetime
import time
import logging
from openai import OpenAI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø OPENAI ASSISTANT ---
openai_client = None

def initialize_openai():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI Assistant API"""
    global openai_client
    try:
        api_key = os.getenv('OPENAI_API_KEY')
        if not api_key:
            raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        openai_client = OpenAI(
            api_key=api_key,
            default_headers={"OpenAI-Beta": "assistants=v2"}
        )
        logger.info("OpenAI Assistant API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        assistant_id = os.getenv('ASSISTANT_ID')
        if assistant_id:
            try:
                assistant = openai_client.beta.assistants.retrieve(assistant_id)
                logger.info(f"Assistant –Ω–∞–π–¥–µ–Ω: {assistant.name}")
            except Exception as e:
                logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ Assistant {assistant_id}: {e}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {str(e)}")
        openai_client = None
        return False

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GOOGLE SHEETS ---
sheets_service = None

def initialize_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API"""
    global sheets_service
    try:
        credentials_path = os.getenv('GOOGLE_SHEETS_CREDENTIALS_FILE', 'credentials.json')
        if not os.path.exists(credentials_path):
            raise FileNotFoundError(f"–§–∞–π–ª —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö Google Sheets –Ω–µ –Ω–∞–π–¥–µ–Ω: {credentials_path}")
        scopes = ['https://www.googleapis.com/auth/spreadsheets']
        creds = service_account.Credentials.from_service_account_file(
            credentials_path, scopes=scopes
        )
        sheets_service = build('sheets', 'v4', credentials=creds)
        logger.info("Google Sheets API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {str(e)}")
        sheets_service = None
        return False

# –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
initialize_openai()
initialize_sheets()

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM ---
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')
TELEGRAM_API_URL = f'https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}'

# --- –•–†–ê–ù–ï–ù–ò–ï THREAD_ID –î–õ–Ø –ö–ê–ñ–î–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ---
user_threads = {}  # user_id (str/int) -> thread_id (str)
web_threads = {}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º thread_id –¥–ª—è –≤–µ–±-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
web_message_counts = {}  # –°—á–µ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ thread

# --- –§–£–ù–ö–¶–ò–ò ---
def save_application_to_sheets(data: dict):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ Google –¢–∞–±–ª–∏—Ü—É.
    –ö–æ–ª–æ–Ω–∫–∏:
    A - –ò–º—è
    B - –¢–µ–ª–µ—Ñ–æ–Ω
    C - –ñ–µ–ª–∞–µ–º–∞—è —É—Å–ª—É–≥–∞
    D - –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∂–µ–ª–∞–µ–º–æ–π –∑–∞–ø–∏—Å–∏
    E - –ö–∞—Ç–µ–≥–æ—Ä–∏—è –º–∞—Å—Ç–µ—Ä–∞
    F - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏/–ø–æ–∂–µ–ª–∞–Ω–∏—è
    """
    try:
        logger.info(f"Attempting to save to Google Sheets: {data}")
        row = [
            data.get('name', ''),
            "'" + data.get('phone', ''),
            data.get('service', ''),
            data.get('date', ''),
            data.get('master', ''),
            data.get('comment', '')
        ]
        range_name = '–õ–∏—Å—Ç1!A:F'
        value_input_option = 'USER_ENTERED'
        insert_data_option = 'INSERT_ROWS'
        value_range_body = {
            'values': [row]
        }
        spreadsheet_id = os.getenv('GOOGLE_SHEET_ID')
        if not spreadsheet_id:
            raise ValueError("GOOGLE_SHEET_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        result = sheets_service.spreadsheets().values().append(
            spreadsheetId=spreadsheet_id,
            range=range_name,
            valueInputOption=value_input_option,
            insertDataOption=insert_data_option,
            body=value_range_body
        ).execute()
        logger.info(f"Successfully saved to Google Sheets: {result}")
        return True
    except Exception as e:
        logger.error(f"Error in save_application_to_sheets: {str(e)}", exc_info=True)
        return False

def send_admin_notification(text: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Å–ª—É–∂–µ–±–Ω—ã–π Telegram-—á–∞—Ç.
    """
    try:
        url = f"{TELEGRAM_API_URL}/sendMessage"
        payload = {
            'chat_id': ADMIN_CHAT_ID,
            'text': text,
            'parse_mode': "HTML"
        }
        response = requests.post(url, json=payload)
        response.raise_for_status()
    except Exception as e:
        print(f"Error in send_admin_notification: {str(e)}")

def remove_formatting(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
    """
    text = text.replace('**', '')
    text = text.replace('‚Ä†', '')
    text = text.replace('„Äê', '')
    text = text.replace('„Äë', '')
    return text

def get_openai_assistant_reply(user_id: int, message: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç OpenAI Assistant
    """
    try:
        logger.info(f"Processing message from user {user_id}: {message}")
        models = openai_client.models.list()
        logger.info(f"Successfully connected to OpenAI. Available models: {[model.id for model in models]}")
        assistant = openai_client.beta.assistants.retrieve(os.getenv('ASSISTANT_ID'))
        logger.info(f"Successfully retrieved assistant: {assistant.id}")
        if user_id not in user_threads:
            logger.info(f"Creating new thread for user {user_id}")
            thread = openai_client.beta.threads.create()
            user_threads[user_id] = thread.id
            logger.info(f"Created new thread: {thread.id}")
        else:
            logger.info(f"Using existing thread for user {user_id}: {user_threads[user_id]}")
        logger.info(f"Sending message to thread {user_threads[user_id]}")
        openai_client.beta.threads.messages.create(
            thread_id=user_threads[user_id],
            role="user",
            content=message
        )
        logger.info("Message sent successfully")
        logger.info(f"Starting assistant run with ID {assistant.id}")
        run = openai_client.beta.threads.runs.create(
            thread_id=user_threads[user_id],
            assistant_id=assistant.id
        )
        logger.info(f"Run created: {run.id}")
        max_wait = 30
        start_time = time.time()
        while time.time() - start_time < max_wait:
            run = openai_client.beta.threads.runs.retrieve(
                thread_id=user_threads[user_id],
                run_id=run.id
            )
            logger.info(f"Run status: {run.status}")
            if run.status == "completed":
                logger.info("Run completed, retrieving messages")
                messages = openai_client.beta.threads.messages.list(
                    thread_id=user_threads[user_id]
                )
                assistant_message = messages.data[0].content[0].text.value
                assistant_message = remove_formatting(assistant_message)
                logger.info(f"Got response: {assistant_message[:50]}...")
                return assistant_message
            elif run.status == "requires_action":
                logger.info("üîß Run requires action, handling function calls")
                tool_calls = run.required_action.submit_tool_outputs.tool_calls
                tool_outputs = []
                for tool_call in tool_calls:
                    function_name = tool_call.function.name
                    logger.info(f"üìû Function call: {function_name}")
                    if function_name == "save_booking_data":
                        try:
                            import json
                            from datetime import datetime
                            function_args = json.loads(tool_call.function.arguments)
                            logger.info(f"üìã Function arguments: {function_args}")
                            sheets_data = {
                                'name': function_args.get('name', ''),
                                'phone': function_args.get('phone', ''),
                                'service': function_args.get('service', ''),
                                'date': function_args.get('datetime', ''),
                                'master': function_args.get('master_category', ''),
                                'comment': function_args.get('comments', ''),
                                'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                            }
                            success = save_application_to_sheets(sheets_data)
                            if success:
                                admin_text = f"""
ü§ñ –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞!

üë§ –ò–º—è: {function_args.get('name', '')}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {function_args.get('phone', '')}
üíÖ –£—Å–ª—É–≥–∞: {function_args.get('service', '')}
üìÖ –î–∞—Ç–∞: {function_args.get('datetime', '')}
üë®‚Äçüé® –ú–∞—Å—Ç–µ—Ä: {function_args.get('master_category', '')}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {function_args.get('comments', '–ù–µ—Ç')}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                                """
                                send_admin_notification(admin_text.strip())
                                tool_outputs.append({
                                    "tool_call_id": tool_call.id,
                                    "output": "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ Google Sheets! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
                                })
                                logger.info("‚úÖ Booking data saved successfully")
                            else:
                                tool_outputs.append({
                                    "tool_call_id": tool_call.id,
                                    "output": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏."
                                })
                                logger.error("‚ùå Failed to save booking data")
                        except Exception as e:
                            logger.error(f"‚ùå Error processing save_booking_data: {e}")
                            tool_outputs.append({
                                "tool_call_id": tool_call.id,
                                "output": f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
                            })
                if tool_outputs:
                    run = openai_client.beta.threads.runs.submit_tool_outputs(
                        thread_id=user_threads[user_id],
                        run_id=run.id,
                        tool_outputs=tool_outputs
                    )
                    logger.info("üì§ Tool outputs submitted, continuing run...")
            elif run.status in ["failed", "cancelled", "expired"]:
                logger.error(f"Run failed with status: {run.status}")
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"
            time.sleep(1)
        logger.warning("Request timed out")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—â–µ —Ä–∞–∑."
    except Exception as e:
        logger.error(f"Error in get_openai_assistant_reply: {str(e)}", exc_info=True)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def clean_assistant_response(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å—Å—ã–ª–æ–∫"""
    import re
    text = re.sub(r'„Äê[^„Äë]*„Äë', '', text)
    text = re.sub(r'\[[^\]]*‚Ä†[^\]]*\]', '', text)
    text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)
    text = re.sub(r'\*(.*?)\*', r'\1', text)
    text = re.sub(r'‚Ä†', '', text)
    text = re.sub(r'‚Ä°', '', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text

def chat_with_assistant(message: str, user_id: str = None):
    """–û–±—â–µ–Ω–∏–µ —Å OpenAI Assistant —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Function Calling –∏ –ø–∞–º—è—Ç—å—é –¥–∏–∞–ª–æ–≥–∞"""
    if not openai_client:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, Assistant API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –±—ã—Å—Ç—Ä–æ–π –∑–∞–ø–∏—Å—å—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    try:
        assistant_id = os.getenv('ASSISTANT_ID')
        if not assistant_id:
            return "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Assistant API."
        MAX_MESSAGES = 12
        if user_id and user_id in web_threads:
            message_count = web_message_counts.get(user_id, 0)
            if message_count >= MAX_MESSAGES:
                thread = openai_client.beta.threads.create()
                thread_id = thread.id
                web_threads[user_id] = thread_id
                web_message_counts[user_id] = 0
            else:
                thread_id = web_threads[user_id]
        else:
            thread = openai_client.beta.threads.create()
            thread_id = thread.id
            if user_id:
                web_threads[user_id] = thread_id
                web_message_counts[user_id] = 0
        if user_id:
            web_message_counts[user_id] = web_message_counts.get(user_id, 0) + 1
        openai_client.beta.threads.messages.create(
            thread_id=thread_id,
            role="user",
            content=message
        )
        run = openai_client.beta.threads.runs.create(
            thread_id=thread_id,
            assistant_id=assistant_id
        )
        import time
        while run.status in ['queued', 'in_progress', 'cancelling']:
            time.sleep(1)
            run = openai_client.beta.threads.runs.retrieve(
                thread_id=thread_id,
                run_id=run.id
            )
            if run.status == 'requires_action':
                tool_calls = run.required_action.submit_tool_outputs.tool_calls
                tool_outputs = []
                for tool_call in tool_calls:
                    function_name = tool_call.function.name
                    import json
                    function_args = json.loads(tool_call.function.arguments)
                    if function_name == "save_booking_data":
                        sheets_data = {
                            'name': function_args.get('name', ''),
                            'phone': function_args.get('phone', ''),
                            'service': function_args.get('service', ''),
                            'date': function_args.get('datetime', ''),
                            'master': function_args.get('master_category', ''),
                            'comment': function_args.get('comments', ''),
                            'created_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                        }
                        success = save_application_to_sheets(sheets_data)
                        if success:
                            admin_text = f"""
üåê –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê —á–µ—Ä–µ–∑ –≤–µ–±-–≤–∏–¥–∂–µ—Ç!

üë§ –ò–º—è: {function_args.get('name', '')}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {function_args.get('phone', '')}
üíÖ –£—Å–ª—É–≥–∞: {function_args.get('service', '')}
üìÖ –î–∞—Ç–∞: {function_args.get('datetime', '')}
üë®‚Äçüé® –ú–∞—Å—Ç–µ—Ä: {function_args.get('master_category', '')}
üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {function_args.get('comments', '–ù–µ—Ç')}
‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
                            """
                            send_admin_notification(admin_text.strip())
                        result = {
                            "success": success,
                            "message": "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!" if success else "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏"
                        }
                        tool_outputs.append({
                            "tool_call_id": tool_call.id,
                            "output": str(result)
                        })
                run = openai_client.beta.threads.runs.submit_tool_outputs(
                    thread_id=thread_id,
                    run_id=run.id,
                    tool_outputs=tool_outputs
                )
        if run.status == 'completed':
            messages = openai_client.beta.threads.messages.list(
                thread_id=thread_id
            )
            for message in messages.data:
                if message.role == "assistant":
                    raw_response = message.content[0].text.value
                    cleaned_response = clean_assistant_response(raw_response)
                    return cleaned_response
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å Assistant: {str(e)}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞." 
